{"version":3,"sources":["redux/reducers/score.js","redux/reducers/index.js","redux/actions/types.js","redux/store.js","components/PlayArea.js","redux/actions/score.js","components/LeaderBoard.js","components/ScoreBoard.js","App.js","index.js"],"names":["initialState","score","level","combineReducers","state","arguments","length","undefined","action","type","payload","Object","objectSpread","middleWare","thunk","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","apply","connect","setScore","dispatch","incrementLevel","_ref","canvas","rows","cols","ctx","_ref$score","_useState","useState","_useState2","slicedToArray","gameover","setgameover","lvl","curr_score","myRef","React","createRef","BOX","UP","DOWN","LEFT","RIGHT","hangTime","speed","curr_direction","apple","x","y","snek","vel_x","vel_y","tail","draw","gameOver","clearRect","width","height","head","JSON","parse","stringify","concat","toConsumableArray","spawnApple","slice","forEach","part","index","fillStyle","fillRect","strokeRect","dead","node","death","console","log","font","textAlign","fillText","setTimeout","requestAnimationFrame","init","window","onkeydown","e","keyCode","isLegalSpawn","flag","Math","floor","random","push","useEffect","current","getContext","react_default","a","createElement","className","ref","id","onClick","href","LeaderBoard","props","App","es","components_LeaderBoard","components_PlayArea","components_ScoreBoard","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.54fc7bcd.chunk.js","sourcesContent":["import { INCREMENT_LEVEL, SET_SCORE } from '../actions/types';\r\n\r\nconst initialState = {\r\n  score: 0,\r\n  level: 1\r\n};\r\n\r\nexport default function(state = initialState, action) {\r\n  const { type, payload } = action;\r\n  switch (type) {\r\n    case SET_SCORE:\r\n      return {\r\n        ...state,\r\n        score: state.score + 5\r\n      };\r\n    case INCREMENT_LEVEL:\r\n      return {\r\n        ...state,\r\n        level: state.level + 1\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from 'redux';\r\n\r\nimport score from './score';\r\n\r\nexport default combineReducers({ score });\r\n","export const SET_SCORE = 'SET_SCORE';\r\nexport const INCREMENT_LEVEL = 'INCREMENT_LEVEL';\r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport rootReducer from './reducers';\r\n\r\nlet initialState = {};\r\n\r\nconst middleWare = [thunk];\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n    initialState,\r\n    composeWithDevTools(applyMiddleware(...middleWare))\r\n);\r\n\r\nexport default store;\r\n","import React, { useEffect, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { setScore, incrementLevel } from '../redux/actions/score';\r\nimport { connect } from 'react-redux';\r\n\r\nconst PlayArea = ({ score: { score, level }, setScore, incrementLevel }) => {\r\n  const [gameover, setgameover] = useState(false);\r\n  let lvl = level;\r\n  let curr_score = score;\r\n\r\n  let myRef = React.createRef();\r\n  let canvas;\r\n  const BOX = 20;\r\n\r\n  const UP = 38;\r\n  const DOWN = 40;\r\n  const LEFT = 37;\r\n  const RIGHT = 39;\r\n\r\n  let hangTime = false;\r\n  const speed = 1;\r\n  let curr_direction = RIGHT;\r\n\r\n  let apple = {\r\n    x: null,\r\n    y: null\r\n  };\r\n\r\n  let snek = {\r\n    x: 3 * BOX,\r\n    y: 3 * BOX,\r\n    vel_x: speed,\r\n    vel_y: 0,\r\n    tail: []\r\n  };\r\n  snek.tail.push([snek.x, snek.y]);\r\n\r\n  let rows, cols, ctx;\r\n\r\n  function appleIsEaten() {\r\n    if (snek.x === apple.x && snek.y === apple.y) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  function bindArrowKeys() {\r\n    window.onkeydown = e => {\r\n      if (hangTime) return;\r\n      let hang = 80;\r\n      switch (e.keyCode) {\r\n        case UP:\r\n          if (curr_direction !== DOWN) {\r\n            snek.vel_y = -speed;\r\n            snek.vel_x = 0;\r\n            curr_direction = UP;\r\n            hangTime = true;\r\n            setTimeout(() => {\r\n              hangTime = false;\r\n            }, hang);\r\n          }\r\n          break;\r\n        case DOWN:\r\n          if (curr_direction !== UP) {\r\n            snek.vel_x = 0;\r\n            snek.vel_y = speed;\r\n            curr_direction = DOWN;\r\n            hangTime = true;\r\n\r\n            setTimeout(() => {\r\n              hangTime = false;\r\n            }, hang);\r\n          }\r\n          break;\r\n        case LEFT:\r\n          if (curr_direction !== RIGHT) {\r\n            snek.vel_x = -speed;\r\n            snek.vel_y = 0;\r\n            hangTime = true;\r\n            curr_direction = LEFT;\r\n            setTimeout(() => {\r\n              hangTime = false;\r\n            }, hang);\r\n          }\r\n          break;\r\n        case RIGHT:\r\n          if (curr_direction !== LEFT) {\r\n            snek.vel_x = speed;\r\n            snek.vel_y = 0;\r\n            hangTime = true;\r\n            curr_direction = RIGHT;\r\n            setTimeout(() => {\r\n              hangTime = false;\r\n            }, hang);\r\n          }\r\n          break;\r\n\r\n        default:\r\n          break;\r\n      }\r\n    };\r\n  }\r\n\r\n  function death() {\r\n    let dead = false;\r\n\r\n    if (\r\n      snek.x > canvas.width - 2 * BOX ||\r\n      snek.x < 20 ||\r\n      snek.y > canvas.height - 2 * BOX ||\r\n      snek.y < 20\r\n    )\r\n      dead = true;\r\n    snek.tail.slice(1).forEach(node => {\r\n      if (snek.x === node[0] && snek.y === node[1]) dead = true;\r\n    });\r\n    return dead;\r\n  }\r\n\r\n  function draw() {\r\n    let gameOver = false;\r\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n    //move snek head\r\n    snek.x += snek.vel_x * BOX;\r\n    snek.y += snek.vel_y * BOX;\r\n    let head = JSON.parse(JSON.stringify([snek.x, snek.y]));\r\n\r\n    if (appleIsEaten()) {\r\n      // Increase Size\r\n      snek.tail = [head, ...snek.tail];\r\n      setScore();\r\n      curr_score += 5;\r\n      if (curr_score % 10 === 0) {\r\n        lvl++;\r\n        incrementLevel();\r\n      }\r\n\r\n      spawnApple();\r\n    } else {\r\n      snek.tail = [head, ...snek.tail.slice(0, -1)];\r\n    }\r\n\r\n    snek.tail.forEach((part, index) => {\r\n      ctx.fillStyle = 'white';\r\n      ctx.fillRect(part[0], part[1], BOX, BOX);\r\n      ctx.fillStyle = 'gray';\r\n      ctx.strokeRect(part[0], part[1], BOX, BOX);\r\n    });\r\n\r\n    //Draw apple\r\n    ctx.fillStyle = 'red';\r\n    ctx.fillRect(apple.x, apple.y, BOX, BOX);\r\n\r\n    //Check for crash\r\n    if (death()) {\r\n      gameOver = true;\r\n      setgameover(true);\r\n      gameOverScreen();\r\n    }\r\n\r\n    if (!gameOver) {\r\n      setTimeout(() => requestAnimationFrame(draw), 1000 / (9 + lvl)); // to increase speed\r\n    }\r\n  }\r\n\r\n  function gameOverScreen() {\r\n    console.log('gameOver');\r\n    ctx.fillStyle = 'red';\r\n\r\n    ctx.font = '48px arcade';\r\n    ctx.textAlign = 'center';\r\n    ctx.fillText('Game Over!', (rows * BOX) / 2, (rows * BOX) / 2);\r\n  }\r\n\r\n  function init() {\r\n    ctx.fillRect(snek.x, snek.y, BOX, BOX);\r\n    bindArrowKeys();\r\n    spawnApple();\r\n    draw();\r\n  }\r\n\r\n  // To see if apple spawned over something existing\r\n  function isLegalSpawn(x, y) {\r\n    let flag = true;\r\n    snek.tail.forEach(node => {\r\n      if (node[0] === x * BOX && node[1] === y * BOX) flag = false;\r\n    });\r\n    return flag;\r\n  }\r\n\r\n  function spawnApple() {\r\n    let x, y;\r\n    do {\r\n      // (max-min+1)+min so as to not spawn on edge\r\n      x = Math.floor(Math.random() * (cols - 2 - 2 + 1) + 2);\r\n      y = Math.floor(Math.random() * (rows - 2 - 2 + 1) + 2);\r\n    } while (!isLegalSpawn(x, y));\r\n\r\n    apple.x = x * BOX;\r\n    apple.y = y * BOX;\r\n  }\r\n\r\n  useEffect(() => {\r\n    canvas = myRef.current;\r\n    ctx = canvas.getContext('2d');\r\n\r\n    rows = Math.floor(canvas.height / BOX);\r\n    cols = Math.floor(canvas.width / BOX);\r\n\r\n    init();\r\n  }, []);\r\n\r\n  return (\r\n    <div className='Console DisplayArea'>\r\n      <h1>~Snek game~</h1>\r\n\r\n      <canvas ref={myRef} id='canvas' width='500' height='500' />\r\n      <a\r\n        id='replay'\r\n        onClick={() => init()}\r\n        className={gameover ? 'gameover' : ''}\r\n        href='/'\r\n      >\r\n        Play{'   '}Again?\r\n      </a>\r\n    </div>\r\n  );\r\n};\r\n\r\nPlayArea.propTypes = {\r\n  setScore: PropTypes.func.isRequired,\r\n  score: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  score: state.score\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { setScore, incrementLevel }\r\n)(PlayArea);\r\n","import { SET_SCORE, INCREMENT_LEVEL } from './types';\r\n\r\n// Set score\r\nexport const setScore = () => dispatch => {\r\n  dispatch({\r\n    type: SET_SCORE\r\n  });\r\n};\r\n\r\nexport const incrementLevel = () => dispatch => {\r\n  dispatch({\r\n    type: INCREMENT_LEVEL\r\n  });\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst LeaderBoard = props => {\r\n  return (\r\n    <div className='LeaderBoard DisplayArea'>\r\n      <h2>High Scores</h2>\r\n      <hr />\r\n    </div>\r\n  );\r\n};\r\n\r\nLeaderBoard.propTypes = {};\r\n\r\nexport default LeaderBoard;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\n\r\nconst ScoreBoard = ({ score: { score, level } }) => {\r\n  return (\r\n    <div className='ScoreBoard DisplayArea'>\r\n      <h5>\r\n        L v L - <span className='lvl'> {level}</span>\r\n      </h5>\r\n      Score <hr /> {score}\r\n      <br /> <br />\r\n    </div>\r\n  );\r\n};\r\n\r\nScoreBoard.propTypes = {\r\n  score: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  score: state.score\r\n});\r\n\r\nexport default connect(mapStateToProps)(ScoreBoard);\r\n","import React from 'react';\nimport './App.css';\n\n// Redux\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nimport PlayArea from './components/PlayArea';\nimport LeaderBoard from './components/LeaderBoard';\nimport ScoreBoard from './components/ScoreBoard';\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className='App'>\n        <LeaderBoard />\n        <PlayArea />\n        <ScoreBoard />\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}